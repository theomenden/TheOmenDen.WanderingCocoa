plugins {
    id 'com.github.johnrengelman.shadow' version "8.1.+"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

base {
    archivesName = "wanderingcocoa-neoforge"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
        common
        shadowCommon
        compileClasspath.extendsFrom common
        runtimeClasspath.extendsFrom common
        developmentNeoForge.extendsFrom common
 }

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven { url "https://www.cursemaven.com"}
}

dependencies {
    neoForge libs.neoforge
    modImplementation libs.architectury.neoforge
    modImplementation libs.jamlib.neoforge
    forgeRuntimeLibrary libs.jankson

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archivesBaseName + "-neoforge"
            from components.java
        }
    }
}

processResources {
    filesMatching("mods.toml") {
        expand "minecraft_version": project.minecraft_version,
               "architectury_version": libs.versions.architectury.get(),
               "jamlib_version": libs.versions.jamlib.get()
    }
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "architectury_version", libs.versions.architectury.get()
    inputs.property "jamlib_version", libs.versions.jamlib.get()
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map {zipTree(it)}
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
